declare variables 

a) caught to be 5*5
b) ten to 10
c) mood to light . then change it to dark. 
d) luigisDebt to 140
e) one to 1 and two to 2 and print the result of addition, substraction and multiplication.

Strings.
-------
Strings are to be in quotes. 
Declare 3 variables 
a) Down on the 	sea
b) Lie on the ocean
and 
c) Float on the ocean. 
Use single ', ` and " as part of the solution.

Print the following. Use newline as part of the solution.

This is the first line
And this is the second

produce concatenate by adding 
con, cat, e and  nate. 

using template literal produce result of 
half of 100 and print the half value. 

Print the type of 4.5 and value x. 

compare Aardvark with Zoroaster
compare Itchy with scracthy using == and != 

Do the following things.
"5" - 1 and
"5" + 1
"five" * 2
0 is false in java script. 

use or operator to print null or user.
Agnes or user. 

Logical operators. 
==================
use == and > for 1+1 comapred to 2 and 10 greater than 50.


Bindings
==========
use let as part of the solution and not var.

declare caught to be 5*5
declare let to be 10 and print 100 using multiplication.
declare mood to be light and then print dark and print mood to both times. 
declare luigisDebt to 140 and subtract 35 and print it
delcare one to be 1 and two to be 2 and print the addition . 


const is constant 
delcare greeting as constant to be Hello and print Hello Adya. Adyas should be
declared as a variable.
Find minimum of 2 and 4 and maximum of 2 and 4.

Functions
-------------
using math function, print minimum of 2 and 4. Then print the maximum of 2 and 4. 

const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});


Conditional expressions . Use Number.isNan method. 

declare theNumber to be 1 and print the square root of the number. 
Your number is the square root of theNumber.
Otherwise 
Print Why didn't give me a number?

For now use the following method.
declare num to be 10.

if num < 10 print Small.
num < 100 print Medium. 
otherwise print Large. 

while loop.
use while loop to print numbers between 0 to 12. 

declare result to be 1.
declare counter to be 0.

within the loop multiply result to be result * 2. Loop 10 times.
and then print the result. Answer should be 1024

Using a for loop print the number from 0 to 12. 

using a for loop print the result *2 and lopp 10 times to get the answer. 

Get the input from keyboard on What is the weather like? 
Use switch and case. 

if rainy print Remember to bring an umbrella.
if sunny print Dress lightly.
if cloudy  print Go Outside.
if none of the above, print Unknown weather type!


Looping a Triangle
Write a loop that makes seven calls to console.log to output the following triangle:

#
##
###
####
#####
######
#######


Functions
----------
a) Write a function square that returns the square of the number. 
b) Write a function makeNoise that writes "Pling!" 
c) Write a function power that return the power of 2. 
power(2, 10) = 1024
power(2,3) = 8
power(4,2) = 16

d) 
declare a variable x as "outside"
create two functions and change variables to "Inside f1" and Inside f2"


Functions within a function. 
Write a function landscape that printbelow. 
Use inner functions for the solution.


___/''''\______/'\_

My soolution.
___/''''\_______/'\_

____/''''\_______/'\



Functions as Values
------------------
Declare a function and assign it to variable launchMissiles. The function should print "Launch Now!"
then delcare a safeMode variable and if safeMode is true. reassign the varaiable to a function tha prints cancel launch.

Test it


Optional Arguments
-------------
write a function power which takes base and exponent as arguments. 
if exponent is undefined assign it to two. 

Closure
---------
Write a function wrapValue(n) which returns another function with the argument passed into wrapValue

Write a function multipler(factor) which turns function that returns factor *number. number is taken
as input into a function that is being returned.

var twice = multiplier(2);
console.log(twice(5)); 
value should be 10


Recursive Functions
-------------------
Rewrite power function using recursive solution.
Write a function findSolution. which can get to a target either by adding 3 or multiplying by 5. 
findSolution takes target to get to the solution. and should print history.


function power(base, exponent) {
    if (exponent == 0) {
        return 1;
    }else {
        return base * power(base, exponent-1);
}

Refactoring
-------
function printFarmInventory(cows, chickens) {
    var cowString = String(cows);
    while (cowString.length < 3)
      cowString = "0" + cowString;
    console.log(cowString + " Cows");
    var chickenString = String(chickens);
    while (chickenString.length < 3)
      chickenString = "0" + chickenString;
    console.log(chickenString + " Chickens");
  }
  printFarmInventory(7, 11);

Refactor the above function
and make sure that it easily accomodates pigs

Chapter 4 Arrays
-----------------
Declare an array of 2, 3, 5, 7, 11 and print third and first element. 


Properties. 
print the length of the above array using dot operator and square bracket operator.

String properties . 
toUpperCase()
typeof

Arrays
----
push, pop



declare doh to be Doh and print the upper case and type of doh
declare a squence to be 1 2 and 3.
add 4 and 5 at the end and remove 5. Print after both the operations.

Objects
--------
Declare an object with {} syntax. Key and value pairs are separated using colon : .

Declare a object day1 whose object properties are 
a) squirrel, 
b) events which is a list of work, touched tree pizza and running. 
print the squirrel object and second element of the events. 
c) declare an object called descriptions which have properties work (Went to Work) and touched tree (Touched a tree)
print both the values. 

in binary operator. returns if a property is in object or not.
delcare an object with left as 1 and right as 2. and then print the values. 
use in operator to test if the properties exist

Object.keys will return all the keys of the Object as an array. 
Print the keys of the object {x: 0, y: 0, z: 2}
Object.assign will copy all the properties from one object to another. 

declare an objectA to be a (1) and b(2) 
copy this object {b: 3, c: 4}); to objectA and then print the values. 

Declare an array of objects. 
--------------

First entry in an object is 
events as "work", "touched tree", "pizza", "running", "television" and squirrel to be false.
events as "work", "ice cream", "cauliflower", "lasagna", "touched tree", "brushed teeth" and squirrel as false.
events as "weekend", "cycling", "break", "peanuts",  "beer" and squirrel as true.


Declare object1 to have value 10
assign objec2 to object 1.
Test == operator on object2 and object1.
declare object3 (don't assign) to be as same as objec1 and test the equality operator.

delcare score to be an object (as constant score) having visitors (value is 0) and home (value is 0). 
reassign visitors to 1.

try to reassign score and then see the result.

Solve the problem declare an array of objects using a function. 
called addEntry 
Figure out the parameters yourself. It should be in any array called journal.
When added without : operator and specifying value, name ia automatically from the variable name and
value is from the value that is passed. 

write a function tableFor(event, journal)  that does the following. 
declare a table to be 0,0,0,0
if an entry of journal contains an event. then 

includes is a method, that checks to see if the includes include a particualr string. 

table)
Use the table of an array of objects and collect all the events and there should not any duplicates. 
Do it using two different ways. One using the array index and another using of operator.

Array methods.
shift, unshift, slice, indexOf, lastIndexOf

0, 1, 2, 3, 4 . Get elemnts 2, 3 and 4 from an array.

0, 1, 2, 3, 4. Get elemnts from 2 onwards. 

write a method remove that which removes an element at index (index) from an array. 
test it by using Remove c "a", "b", "c", "d", "e" 

to the tasks returned in table. add a task called "Worker task" in the beginning 
and then remove ti. Print the array both tiems. 


for the problem above. add a task in the beginning and remove one from the beginning. 

Strings and Their Properties
--------
slice will not remove as with arrays. 
indexOf operator defines the occurence of the stirng staarting position.
trim removes whitespaces. 
padStart will add 'any character' to the String.  
String(6).padStart(3, "0")
3 = total length. "0" string to be added. 
split will split the String into an array. 
repeat(n) will repeat the string 
join will join an array into a string.  


examples
coconunts . Use function to get nut
one two three. Find the occurence of ee.
"   okay" . Rmove the white spaces. 
For String 6 make it to 006

Secretarybirds specialize in stomping
Get all arrays of words 

Conver the array back to string. 
Secretarybirds. specialize. in. stomping

LA (make it to LALALA)

REST Parameters. Variable number of arguments 
----
Write a functiont that takes variable number of araguments and finds 
the maximum of numbers. 
function name is called max
give the solution using the variable numebr of parameters. 

max(4, 1, 9, -2) the result is 9
Function that takes variable number of arguments should have ...
and if you inoking function with an array you need to used ...

Math Object is 
-------------
Math.random()
Math.ceil()
Math.floor()

let {name} = {name: "Faraji", age: 23};

Did  not understand this at all.
[n00, n01, n10, n11] is an array notation that can be used to bind parameters of array. 

JSON.stringify and JSON.parse

Chapter 5
----------

function repeat . 

1) This function will repeat action n number of times on arguments 0 to n-1 
action can be any function.
It should take two arguments, the numebr of arguments and the input function
should take atleast one parameter. 

a)  After the function is done, produce a result as below.
// → 0
// → 1
// → 2

After the function is done. 
produce a result like the one below. 

["Unit 1", "Unit 2", "Unit 3", "Unit 4", "Unit 5"]

2)
Return another function.
Write a function greaterThan which returns a function. 
The function returned should have another variable which does the comparision. 
Signature is greaterThan(n)
test it with invocation greaterThan(10) with number as 11

3) 
Write a function called noisy which should 
return another function which can take variable number of arguments. 
The returned function should first print arguments with which it is called.
call the fucntion and which has been passed into it and then capture the result.
and finally log the arguments and the result. 

calling with
noisy(Math.min)(3, 2, 1);
// → calling with [3, 2, 1]
// → called with [3, 2, 1] ,
// returned 1

4) 
Write a function unless that takes two parameters, both of which are functions.
test (a function) and function called then. function called then is executed if test is false.

a) 
use repeat along with 4 to produce the following output.
// → 0 is even
// → 2 is even
should be repeat(3, ...lambda expressions)


use forEach to print A and B which are an array that has A, and B.

5) Filter.
Write a function filter(array, test) which returns an array of elements that
passs a test.
//find all living scripts. using living as a prroperty

// → [{name: "Adlam", ...}, ...]

b) Use ibuiolt filter to get the same result.
c) fild all scripts whose direction is ttb.



Transforming with map.
--------------
6) write a function map. that gets the name of the scripts in an array. should be written as 
a shigher order fucntion. 
with signature.
function map(array, transform);
transform is a function that transforms elements of an array.

a) test it with code . Print all the scripts whose direction is rtl and get names of the scripts in 
an array and print them. Output below.

["Adlam", "Arabic", "Imperial Aramaic", ...]
Solve the same using map operator on an array.

write code that filters the scripts using rtl and gets the names of those scripts. Use function map 
as well as native map to give solutions.

7)
write a reduce function. This should emulate normal reduce opeartion.
which has the following format 
// combine is higher order function.
function reduce(array, combine, start)

Test it with 
console.log(reduce([1, 2, 3, 4], (a, b) => a + b, 0));
// → 10
Use inbuilt reduce for getting the same result.


8) 
To solve the problem, first write a function called characterCount which takes a script as an input, and 
produces a count of all characters.

Find the script with highest numebr of characters. 
range property give the number of characters in each range.

Then use the function that is developed to give the soltuion.
Use Lambda expression for above.
// → {name: "Han", ...}

9) 
write a function average which gives average of all elements in an array.

a) Find all living scripts and get their average year. 
living and year are the proeprties that you will be intereseted in.
// → 1188

b) Find all dead scripts and get their average year. 
living and year are the proeprties that you will be intereseted in.
// → 188


solve both a and b using higher order functions as well as normal for loop.

10) 
Write a function characterScript(code) which returns a scirpt if the code belongs to 
one of th ranges.  use some method for the solution above.

console.log(characterScript(121));
// → {name: "Latin", ...}

11) Recognizing text.

Write a function countBy(items, groupName)
items is a character array and groupName is a higher order function. 

invocation
console.log(countBy([1, 2, 3, 4, 5], n => n > 2));
// → [{name: false, count: 2}, {name: true, count: 3}]

12) Write a function textScripts(text)
that can summarize text with the scripts that are used.

console.log(textScripts('英国的狗说"woof", 俄罗斯的狗说"тяв"')); should produce the 
following result below.
// → 61% Han, 22% Latin, 17% Cyrillic

Solve the exercises.


Chapter 6
----------
Encapsulation
-------------

Methods.
---------
declare an object called rabbit. 
and  a method called speak. 

Sample invocation and output. 
----------------
rabbit.speak("I'm alive."); should print out 
The rabbit says 'I'm alive.'

2) delcare a speak method. The speak method should use this as part of the solution.
function speak
declare whiteRabbit and hungryRabbit. 

properties of whiteRabbit
type  = "White"
spaek

properties of hungryRabbit
type  = "Hungry"
spaek

whiteRabbit.speak("Oh my ears and whiskers, " +late it's getting!
                  "how late it's getting!")
Should print out . 
// → The white rabbit says 'Oh my ears and whiskers, how
// late it's getting!'

hungryRabbit.speak("I could use a carrot right now.");
// → The hungry rabbit says 'I could use a carrot right now.'

Note single quotes around line that was given to be printed out. 

normalize() method. 
should return an array which converts a number to number/length.
Note function does not take any arguments.

use call as part of the solutioon. call with [0, 2, 3] and length

// → [0, 0.4, 0.6]

Protottypes.
--------------
3) 

console.log(Object.getPrototypeOf({}) ==
            Object.prototype);
// → true
console.log(Object.getPrototypeOf(Object.prototype));
// → null

getPrototype of Math.max . Compare this with Function's prototype.
get progottype of [] . Compaare this with Array's prototype

4) delcare a variable called protoRabbit which has method called speak.
do everything that should do. use prototype creation is part of solution

killerRabbit.speak("SKREEEE!");
// → The killer rabbit says 'SKREEEE!'

Object's methods are . 

Object.getPrototypeOf();
Object.assign(0;
Object.keys();

// Do this using prototype method

console.log(Object.getPrototypeOf(Rabbit) ==
            Function.prototype);
// → true
console.log(Object.getPrototypeOf(weirdRabbit) ==
            Rabbit.prototype);
// → true
5) Create a class called Rabbit which takes type as a parameter.
and has a function called speak. which should print out the line 
Use Function way as part of the solution.

declare weiredRabbit as an instance. and test it out.

compare Rabbit's prototype to a function's

// → true
compare weiredRabbit's to Rabbit's prototype. What's the difference between getPrototypeOf and
.prototype method.

console.log(Object.getPrototypeOf(weirdRabbit) ==
            Rabbit.prototype);
// → true


Class Notation:
-------------

Declare a class Rabbit, with exactly same behaviour as before. 
constructor should take type and this class should have  a method called as speak.

Declare killerRabbit and blackRabbit and invoke speak method.


delcare an object which takes class as right hand parameter (as an expression)
which has a method called getWord which should return hello.

var object = new class{...};

Overriding Derived Prooperties.
-------------------

Define Rabbit object as before and 
then assign teeth to be Small for Rabbit.
Alter it for blackRabbit as long, sharp, and bloody
then print blackRabbit.teeth, 
Create another variable called RedRabbit and print the teets. 

Verify the difference in output. 

console.log(Array.prototype.toString ==
            Object.prototype.toString);
// → false
console.log([1, 2].toString());
// → 1,2


declare the following as an object. 

ages contianing following proeprties.

Name
Boris	39
Liang	22
Julia	62

62

Print the following output.
Júlia is 62
Is Jack's age known?  false
// → Is toString's age known? true

create a Map
for the problem above.and print the same results.

use hasOwnProperty() to test if a property is present in t

declare a variable 
{x: 1}
and test if property x is present. 
and toString is rpesent. 


Polymorphism
--------------
console.log(String(blackRabbit));
// → a black rabbit


for an array [1,2,3] declare a toString method using symbol that should print 
length cm of blue yarn.

Symbol.
Assign Symbol("name") to variable called sym.
check if sym == Symbol("name");

Do something that gest the output below.

console.log([1, 2].toString());
// → 1,2
console.log([1, 2][toStringSymbol]());
// → 2 cm of blue yarn


The Iterator interface.
------------------------
Develop a class Matrix. which takes width, height and elemnt function (elment should be initilized to undefined)
Matrix is stored in single dimensional array. so width*3 + 2 will give second (but thrid) row and first column (assume rows and cols should start with 0)
Develop a getter get(x,y) and set(x,y,value)

develop an iterator for above. 
and test it with new Matrix(2,2, `value of ${x} and ${y}`)

Final Output. 
for (let {x, y, value} of matrix) {
  console.log(x, y, value);
}
// → 0 0 value 0,0
// → 1 0 value 1,0
// → 0 1 value 0,1
// → 1 1 value 1,1

arvind@arvind-Orio

0 0 'value of 0 0'
1 0 'value of 1 0'
0 1 'value of 0 1'
1 1 'value of 1 1'
    console.log(x, y, value);

[ 'value 0, 0', 'value 1, 0', 'value 0, 1', 'value 1, 1' ] }



Getters setters and statics
--------------------------------

Write a class called Temparature 
which should take celsius as a parameter. 
getter method of the Temparature class should 
return farenhit.
setter method should take Farenheit and return celsius. 

(F-32)/9 = c/5
F = 1.8*c + 32

C = (F -32)/1.8

output should be as follows.

let temp = new Temperature(22);
console.log(temp.fahrenheit);
// → 71.6
temp.fahrenheit = 86;
console.log(temp.celsius);
// → 30

Inheritence.
-----

Declare SymmetricMatrix
class SymmetricMatrix.
symmetric matrix must have same size. 
setter must set which follows the rules.
and a constructor 

if (x < y) return element(y, x);
      else return element(x, y); do this in constructor.

The instance of operator.
-----------------------
test SymmetricMatrix(2) is it of SymmetricMatrix type
SymmetricMatrix(2) is it  of Matrix type.
Matrix(2, 2) is it of type SymmetricMatrix


https://eloquentjavascript.net/code/#5.4

We have Submitted Vat return and sent payment details separately. Payment should reach to HMRC latest by 07/10/2019

To be documented.

function unless(test, then) {
  if (!test) then();
}

repeat(3, n => {
  unless(n % 2 == 1, () => {
    console.log(n, "is even");
  });
});
// → 0 is even
// → 2 is even

let rtlScripts = SCRIPTS.filter(s => s.direction == "rtl");
console.log(map(rtlScripts, s => s.name));
// → ["Adlam", "Arabic", "Imperial Aramaic", ...]

document testScripts

 filter(({name}) => {  return name != "none";});

  let total = scripts.reduce((n, {count}) => n + count, 0);
  if (total == 0) return "No scripts found";

  return scripts.map(({name, count}) => {
    return `${Math.round(count * 100 / total)}% ${name}`;
  }).join(", ");
}


-------------------------
a) Write a function called canYouSpotTheProblem. 
from counter 0 to counter < 10. print "Happy happy". 
Don't declare counter. 
use strict pragma. 

Types
--------
2)

Testing
-------
a) Write a function called test() which takes two parameters. 
label and body. 
body is a hihger order function can take any parameter and should return boolean value. . 
if body returns false. should print Failed: label

Test it with following scenarios.

"convert Latin text to uppercase"  "hello" converted to upperCase and compared to HELLO
"convert greek text to uppercase"   "" converted to upper case to and convrted to ""
don't convert case-less characters  "    "  converted to upper case and converted to "    "

Debugging
----------
convret number to String.
numberToString(n, base=10);
console.log(numberToString(13, 10));

Write a recursive function. Test it with both negative and positive numbers.


Error Propogation
-----------------
function promptNumber which tests if it is number, if it is not return result.
else return result

write a function lastEleemnt(array);
if length of array is 0, return {falled : true}
else return {element : <last element of the array>}

Exceptions
----------
Write a function called promptDirection() which takes a parameter direction.
if the direction is left, return "L"  . if the direction is Right, return R.
if anything else throw error with "Invalid direction" and direction. Valid directions 
are L, R

Write a function called look() which invokes promptDirection() and if it is L prints out
a house. If it is right, prints two angry bears.

Invoke look. and catch error . Print soemthing went wrong + error.

Cleaning Up After Exceptions
------
declare 3 accounts. 
a : 100, b : 0, c : 20

declare a function getAccount();
which takes accountNmae
if there is noAccount, throw an error with No Such Account : <acctName>

write a function transfer, which takes from (accountNumber) and amount.
subtract money from account only if sufficient funds.
and the tranferTo accountNmae. use getAccount() for this. ideally it should be prompt.

but for now assume that prompt is done by input number.
Test this function with valid and invalid acct numbers.
fix it and then fix it. use finally as part of the solution.


Selective catching
--------------

Declare InputError as an exception (figure out how to do it.)
Make promptDirection throw an InputError. instread of Error.

put some wrapper code around promptDirection which catches the error. expecting. 
otherwise throws the error back.


Assertions
---------

Chapter 9
----------
Regular expressions.

1) Create regular expression in two different ways (// and new RegExp) for eighteen+ and test it.
a) create regex for abc and test it for abcde and abxde 
2)Test if "in 1992" binds to any digit.

3) Write a regex for 01-30-2003 15:20 and see if it matches. Test it also with 30-jan-2003 15:20"
don't anchor the regule expression. But check if the full match is achieved.

4) Wirte a regrex that binds to only 0 and 1 and test it with  1100100010200110 (should return false) and 
1100100010100110 which should return true.

Repeating parts of the pattern.
5) 
Match one or more digits within single quotes. "'123'" should return true. "''" should return false.

b) zero or more digits within single quotes. "'123'" should rerturn true . "''" should return true too.

c) neighbo (zero or one) u r
test it with .
console.log(neighbor.test("neighbour"));
// → true
console.log(neighbor.test("neighbor"));
// → true

d) Rewrite datetime uwing flower brackets {}

Group subexpressions
---------------
write a regular expression that bo (followed by one or more o) and one or more hoo+  . And one more hoo. 
Do a case insensitive binding.

Matches and groups
----------------

Write a regular expression that matches one two 100 and pirnt the string that matched and index that matched. 

in all cases print that string that matched and the group that matched.
regex that matches quoted text and then print the text that matched and the group that matched and test it with
she said 'hello'.

regex that matches bad and zero or more ly and test it with bad.

regex that matches one or more digits and test it with 123.


The Date class.
-----------
create a date like Wed Dec 09 2009 00:00:00 GMT+0100 
2009-12-09T00:00:00.000Z
Get time of 2013, 11, 19. time is epoch time. 
get date from string 1-30-2003 (mon-dd-yyyy)
2003-01-30T00:00:00.000Z

Word And String boundaries.
-------------------------
write  a regex that matches cat, but only if it is a word.
test it with concatenate . SHould return false. 
cat should return true.

write a regular expression for "15 pigs" only if it word boundry, but instead of pigs, could be 
chickens or cows


The Mechanics of Matching
-------------------------

Backtracking.
--------------

/\b([01]+b|[\da-f]+h|\d+)\b/


The replace.
------------

console.log("Borobudur".replace(/[ou]/, "a"));
// → Barobudur
console.log("Borobudur".replace(/[ou]/g, "a"));

Change 
Liskov, Barbara\nMcCarthy, John\nWadler, Philip
to 
Barbara, Liskov\nJohn, McCarthy\nPhilip, Wadler

let s = "the cia and fbi";
print cia and fbi to upper case. using replace and passing a function to it.

Plug in function using replace to the string
let stock = "1 lemon, 2 cabbages, and 101 eggs";
and print the string below. 
no lemon, 1 cabbage, and 100 eggs


Greed.
------
Write a function called stripComments that removes comments.
Test it with.

"1 + /* 2 */3"
should print // → 1 + 3

"x = 10;// ten!"
should print // → x = 10;	

"1 /* a */+/* b */ 1" wrong implementation of it is // → 1 1, correct one is 1 + 1
should print // → 1 + 3
console.log(stock.replace(/(\d+) (\w+)/g, minusOne));

Dynamically creating RegeExp Objects
---------------------------------------

Assume let name = "harry"; 
Change Harry is a suspicious character to  _Harry_ is a suspicious character.
Assume that you don't know harry upfront. 
Use word boundry as part of solution, even though it works without

let name = "dea+hl[]rd";
"This dea+hl[]rd guy is super annoying."; should now become 
// → This _dea+hl[]rd_ guy is super annoying.


xyzzy. Matchy y after index = 3.

For string "Banana" print all the matches of an

Looping over matches.
------------------
"A string with 3 numbers in it... 42 and 88.";
Print the number and index of the string that matched.


Parsing an ini file.
--------------------
Write a program that does the following.

console.log(parseINI(`
name=Vasilis
[address]
city=Tessaloniki
[datta]
narsimha=saraswati
sripada=vallabha
`));

// → {name: "Vasilis", address: {city: "Tessaloniki"}}







verify(/ca[rt]/,
       ["my car", "bad cats"],
       ["camper", "high art"]);

verify(/pr?op/,
       ["pop culture", "mad props"],
       ["plop", "prrrop"]);

verify(/ferr(et|y|ari)/,
       ["ferret", "ferry", "ferrari"],
       ["ferrum", "transfer A"]);

verify(/\b.*ious\b/,
       ["how delicious", "spacious room"],
       ["ruinous", "consciousness"]);

verify(/\s\./,
       ["bad punctuation ."],
       ["escape the period"]);

verify(/.../,
       ["hottentottententen"],
       ["no", "hotten totten tenten"]);

verify(/.../,
       ["red platypus", "wobbling nest"],
       ["earth bed", "learning ape", "BEET"]);




hint
-----
$& gives what matched. No need for $1
[\\[.+*?(){|^$]

[\\[.+*?(){|^$]

Search and lastIndex.
console.log(" word".search(/\S/));

Match and looping.
--------------
let input = "A string with 3 numbers in it... 42 and 88.";

searchengine=https://duckduckgo.com/?q=$1
spitefulness=9.7

; comments are preceded by a semicolon...
; each section concerns an individual enemy
[larry]
fullname=Larry Doe
type=kindergarten bully
website=http://www.geocities.com/CapeCanaveral/11451

[davaeorn]
fullname=Davaeorn
type=evil wizard
outputdir=/home/marijn/enemies/davaeorn

function parseINI(string) {
  // Start with an object to hold the top-level fields
  let result = {};
  let section = result;
  string.split(/\r?\n/).forEach(line => {
    let match;
    if (match = line.match(/^(\w+)=(.*)$/)) {
      section[match[1]] = match[2];
    } else if (match = line.match(/^\[(.*)\]$/)) {
      section = result[match[1]] = {};
    } else if (!/^\s*(;.*)?$/.test(line)) {
      throw new Error("Line '" + line + "' is not valid.");
    }
  });
  return result;
}

console.log(parseINI(`
name=Vasilis
[address]
city=Tessaloniki`));
// → {name: "Vasilis", address: {city: "Tessaloniki"}}





























































































	











































































































user id : apulijala75
Password : Dattatreya2
Secure Number: 534553
Childhood Nickname : Buddu
Model of first car : Honda
Place of Brith : Hyderabad






Eloquent JavaScript, 2nd Edition
Learning Node.js Development



https://www.amazon.co.uk/UNIX-Users-Interactive-Workbook/dp/0130998206/ref=sr_1_1?keywords=Unix+users+interactive+workbook&qid=1569434695&sr=8-1

https://www.amazon.co.uk/Advanced-UNIX-Users-Interactive-Workbook/dp/0130854565/ref=sr_1_2?keywords=Unix+users+interactive+workbook&qid=1569434735&sr=8-2

UNIX System Administrator's Interactive Workbook (UNIX Interactive Workbook) 
https://www.amazon.co.uk/UNIX-System-Administrators-Interactive-Workbook/dp/0130813087/ref=sr_1_7keywords=unix+administration+interactive+workbook&qid=1569434789&sr=8-7


for me to do.
--------
https://www.amazon.co.uk/Network-Administrators-Interactive-Workbook-Workbooks/dp/013020790X/ref=sr_1_fkmr0_1?keywords=Unix+users+interactive+workbook&qid=1569434735&sr=8-1-fkmr0

which code. 

/usr/bin/code
/home/arvind/nodesoftware/node-v10.16.3-linux-x64/share/doc/node
/home/arvind/nodesoftware/node-v10.16.3-linux-x64/bin/node

Getting intellisense in node application.

https://code.visualstudio.com/docs/nodejs/nodejs-tutorial
npm install -g express-generator

Get Programming with Node.js
debugger.
https://itnext.io/the-absolute-easiest-way-to-debug-node-js-with-vscode-2e02ef5b1bad


















break case catch continue debugger default delete
do else false finally for function if implements
in instanceof interface let new null package private
protected public return static switch throw true
try typeof var void while with yield this. 



Eloquent JavaScript, 2nd Edition
Learning Node.js Development (do Node in javascript)
Amazon Web Services in Action, Second Edition










